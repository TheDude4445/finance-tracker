name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/finance-tracker .
        docker push ${{ secrets.DOCKER_USERNAME }}/finance-tracker

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    # Step 1: Create the .pem file from the secret
    - name: Create PEM file
      run: |
        echo "${{ secrets.AWS_KEY }}" > key.pem
        chmod 400 key.pem

    # Step 2: Start the EC2 instance (if not running)
    - name: Start EC2 instance
      run: |
        aws ec2 start-instances --instance-ids ${{ secrets.AWS_INSTANCE_ID }} --region ${{ secrets.AWS_REGION }}
        aws ec2 wait instance-running --instance-ids ${{ secrets.AWS_INSTANCE_ID }} --region ${{ secrets.AWS_REGION }}

    # Step 3: SSH into EC2 and deploy the app
    - name: Deploy to AWS EC2
      run: |
        ssh -o StrictHostKeyChecking=no -T -i key.pem ec2-user@${{ secrets.AWS_IP }} << EOF
        
        # Stop any process using port 80
        sudo fuser -k 80/tcp || true

        # Check if any Docker container is running on port 80 and stop it
        CONTAINER_ID=\$(docker ps -q --filter "publish=80")
        if [ "\$CONTAINER_ID" ]; then
          echo "Stopping container using port 80..."
          docker stop \$CONTAINER_ID
          docker rm \$CONTAINER_ID
        fi

        # Prune stopped containers and networks
        docker container prune -f
        docker network prune -f

        # Run the new Docker container
        docker run -d --name finance-tracker -p 80:5000 ${{ secrets.DOCKER_USERNAME }}/finance-tracker:latest
        EOF
